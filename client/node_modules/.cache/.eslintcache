[{"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\index.js":"1","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\App.jsx":"2","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\theme.js":"3","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\error-page.jsx":"4","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\utils\\private_routes.js":"5","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\driverpayroll.jsx":"6","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\home.jsx":"7","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\addvehicle.jsx":"8","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\driverPage.jsx":"9","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\addclient.jsx":"10","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\resetPassword.jsx":"11","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\schedule.jsx":"12","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\login.jsx":"13","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\admin\\Auth.jsx":"14","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\admin\\ResetUserPassword.jsx":"15","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\utils\\generictable.jsx":"16"},{"size":254,"mtime":1692747608142,"results":"17","hashOfConfig":"18"},{"size":11268,"mtime":1693862776954,"results":"19","hashOfConfig":"18"},{"size":189,"mtime":1678567697786,"results":"20","hashOfConfig":"18"},{"size":230,"mtime":1693664314827,"results":"21","hashOfConfig":"18"},{"size":1960,"mtime":1693666398620,"results":"22","hashOfConfig":"18"},{"size":107,"mtime":1688412274142,"results":"23","hashOfConfig":"18"},{"size":318,"mtime":1691366137048,"results":"24","hashOfConfig":"18"},{"size":4775,"mtime":1694102940910,"results":"25","hashOfConfig":"18"},{"size":127,"mtime":1693665946548,"results":"26","hashOfConfig":"18"},{"size":109,"mtime":1688412147223,"results":"27","hashOfConfig":"18"},{"size":4687,"mtime":1692831436643,"results":"28","hashOfConfig":"18"},{"size":103,"mtime":1688412181602,"results":"29","hashOfConfig":"18"},{"size":3462,"mtime":1693436426889,"results":"30","hashOfConfig":"18"},{"size":5218,"mtime":1692831283648,"results":"31","hashOfConfig":"18"},{"size":4708,"mtime":1692831388860,"results":"32","hashOfConfig":"18"},{"size":19381,"mtime":1694296848223,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"a9o1h",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"37"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"37"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"37"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\index.js",[],[],[],"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\App.jsx",["87"],["88","89","90","91"],"/* eslint-disable no-restricted-globals */\nimport { useEffect, useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  NavLink,\n  Link,\n} from \"react-router-dom\";\nimport { ThemeProvider } from \"@mui/material/styles\";\n//import MenuIcon from \"@mui/icons-material/Menu\";\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport AccountCircleIcon from \"@mui/icons-material/AccountCircle\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport \"./index.css\";\nimport theme from \"./theme.js\";\nimport {\n  Toolbar,\n  AppBar,\n  Menu,\n  Button,\n  MenuItem,\n  IconButton,\n  Typography,\n} from \"@mui/material\";\nimport { useCookies } from \"react-cookie\";\nimport Login from \"./pages/login\";\nimport { HomePage } from \"./pages/home\";\nimport { DriverPayroll } from \"./pages/driverpayroll\";\nimport { ScheduledRoutes } from \"./pages/driverPage\";\nimport { AddClient } from \"./pages/addclient\";\nimport AddVehicle from \"./pages/addvehicle\";\nimport { Schedule } from \"./pages/schedule\";\nimport Auth from \"./pages/admin/Auth\";\nimport ResetPassword from \"./pages/resetPassword\";\nimport ResetUserPassword from \"./pages/admin/ResetUserPassword\";\nimport ErrorPage from \"./error-page\";\nimport {\n  PrivateRoutes,\n  AdminRoutes,\n  DispatchRoutes,\n  DriverRoutes,\n  SalesRoutes,\n} from \"./utils/private_routes\";\n\nconst App = () => {\n  const [cookies, setCookie, removeCookie] = useCookies(null);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [anchorE2, setAnchorE2] = useState(null);\n  const [anchorE3, setAnchorE3] = useState(null);\n  const [anchorE4, setAnchorE4] = useState(null);\n  const [isAuth, setIsAuth] = useState(false);\n  const [userType, setUserType] = useState(\"\");\n  const userName = cookies.Username;\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleCloseAccounting = () => {\n    setAnchorE2(null);\n  };\n  const handleClickAccounting = (event) => {\n    setAnchorE2(event.currentTarget);\n  };\n\n  const handleCloseUser = () => {\n    setAnchorE3(null);\n  };\n  const handleClickUser = (event) => {\n    setAnchorE3(event.currentTarget);\n  };\n\n  const handleCloseAdmin = () => {\n    setAnchorE4(null);\n  };\n  const handleClickAdmin = (event) => {\n    setAnchorE4(event.currentTarget);\n  };\n\n  const dispatchGroup = [\"dispatch\", \"admin\"];\n  const salesGroup = [\"sales\", \"dispatch\", \"admin\"];\n  const driverGroup = [\"driver\"];\n\n  const signOut = () => {\n    removeCookie(\"Username\");\n    removeCookie(\"AuthToken\");\n    removeCookie(\"UserType\");\n    setIsAuth(false);\n    window.location.href = \"/\";\n  };\n\n  const getData = async (username) => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_SERVERURL}/getUserType/${username}`\n      );\n      const json = await response.json();\n      setUserType(json);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    if (userName) {\n      setIsAuth(true);\n      getData(userName);\n    } else {\n      setIsAuth(false);\n    }\n  }, [userName]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <AppBar position=\"fixed\">\n          <Toolbar>\n            <Link to=\"/home\">\n              <Typography variant=\"h6\" color=\"white\">\n                Phoenix Bus\n              </Typography>\n            </Link>\n            {isAuth && salesGroup.find((e) => e === userType) ? (\n              <IconButton\n                onClick={handleClick}\n                color=\"inherit\"\n                style={{ marginLeft: \"auto\", paddingRight: \"1vh\" }}\n              >\n                <AddCircleIcon />\n              </IconButton>\n            ) : null}\n            <Menu\n              id=\"simple-menu\"\n              anchorEl={anchorEl}\n              open={Boolean(anchorEl)}\n              onClose={handleClose}\n            >\n              <MenuItem\n                component={NavLink}\n                to=\"/addclient\"\n                onClick={handleClose}\n              >\n                New Client\n              </MenuItem>\n              <MenuItem\n                component={NavLink}\n                to=\"/addreservation\"\n                onClick={handleClose}\n              >\n                New Reservation\n              </MenuItem>\n              <MenuItem\n                component={NavLink}\n                to=\"/addquote\"\n                onClick={handleClose}\n              >\n                New Quote\n              </MenuItem>\n              <MenuItem\n                component={NavLink}\n                to=\"/addvehicle\"\n                onClick={handleClose}\n              >\n                New Vehicle\n              </MenuItem>\n            </Menu>\n            {isAuth && dispatchGroup.find((e) => e === userType) ? (\n              <Link to=\"/schedule\">\n                <Button\n                  id=\"schedule\"\n                  sx={{ color: \"white\" }}\n                  style={{ marginLeft: \"5vh\", marginRight: \"5vh\" }}\n                >\n                  View Schedule\n                </Button>\n              </Link>\n            ) : null}\n            {isAuth && salesGroup.find((e) => e === userType) ? (\n              <Button\n                id=\"quotes\"\n                sx={{ color: \"white\" }}\n                style={{ marginLeft: \"5vh\", marginRight: \"5vh\" }}\n              >\n                Quotes\n              </Button>\n            ) : null}\n            {isAuth && driverGroup.find((e) => e === userType) ? (\n              <Link to=\"/driverpage\">\n                <Button\n                  id=\"driverpage\"\n                  sx={{ color: \"white\" }}\n                  style={{ marginLeft: \"5vh\", marginRight: \"5vh\" }}\n                >\n                  My Routes\n                </Button>\n              </Link>\n            ) : null}\n            {isAuth && userType === \"admin\" ? (\n              <Button\n                id=\"accounting\"\n                aria-controls={open ? \"accounting-menu\" : undefined}\n                aria-haspopup=\"true\"\n                // eslint-disable-next-line no-restricted-globals\n                aria-expanded={open ? \"true\" : undefined}\n                onClick={handleClickAccounting}\n                sx={{ color: \"white\" }}\n                style={{ marginLeft: \"5vh\", marginRight: \"5vh\" }}\n                endIcon={<KeyboardArrowDownIcon />}\n              >\n                Accounting\n              </Button>\n            ) : null}\n            <Menu\n              id=\"accounting-menu\"\n              anchorEl={anchorE2}\n              open={Boolean(anchorE2)}\n              onClose={handleCloseAccounting}\n            >\n              <MenuItem\n                component={NavLink}\n                to=\"/driverpayroll\"\n                onClick={handleCloseAccounting}\n              >\n                Driver Payroll\n              </MenuItem>\n              <MenuItem\n                component={NavLink}\n                to=\"/printInvoice\"\n                onClick={handleCloseAccounting}\n              >\n                Print Invoice\n              </MenuItem>\n              <MenuItem\n                component={NavLink}\n                to=\"/sales\"\n                onClick={handleCloseAccounting}\n              >\n                Sales\n              </MenuItem>\n            </Menu>\n\n            {!isAuth ? (\n              <Link to=\"/login\">\n                <Button\n                  id=\"login\"\n                  sx={{ color: \"white\" }}\n                  style={{ marginLeft: \"5vh\", marginRight: \"5vh\" }}\n                >\n                  Login\n                </Button>\n              </Link>\n            ) : null}\n            {isAuth && userType === \"admin\" ? (\n              <Button\n                id=\"adminBtn\"\n                aria-controls={open ? \"admin-menu\" : undefined}\n                aria-haspopup=\"true\"\n                aria-expanded={open ? \"true\" : undefined}\n                onClick={handleClickAdmin}\n                sx={{ color: \"white\" }}\n                style={{ marginLeft: \"5vh\", marginRight: \"5vh\" }}\n                endIcon={<KeyboardArrowDownIcon />}\n              >\n                Admin\n              </Button>\n            ) : null}\n            <Menu\n              id=\"admin-menu\"\n              anchorEl={anchorE4}\n              open={Boolean(anchorE4)}\n              onClose={handleCloseAdmin}\n            >\n              <MenuItem\n                component={NavLink}\n                to=\"/signup\"\n                onClick={handleCloseAdmin}\n              >\n                Register user\n              </MenuItem>\n              <MenuItem\n                component={NavLink}\n                to=\"/resetUserPass\"\n                onClick={handleCloseAdmin}\n              >\n                Reset user password\n              </MenuItem>\n              <MenuItem\n                component={NavLink}\n                to=\"/removeUser\"\n                onClick={handleCloseAdmin}\n              >\n                Remove user\n              </MenuItem>\n            </Menu>\n            {isAuth ? (\n              <IconButton\n                onClick={handleClickUser}\n                color=\"inherit\"\n                style={{ marginLeft: \"auto\", paddingRight: \"1vh\" }}\n              >\n                <AccountCircleIcon />\n              </IconButton>\n            ) : null}\n            <Menu\n              id=\"user-menu\"\n              anchorEl={anchorE3}\n              open={Boolean(anchorE3)}\n              onClose={handleCloseUser}\n            >\n              <MenuItem\n                component={NavLink}\n                to=\"/resetPassword\"\n                onClick={handleCloseUser}\n              >\n                Reset Password\n              </MenuItem>\n              <MenuItem\n                component={NavLink}\n                to=\"/\"\n                onClick={() => {\n                  signOut();\n                  handleCloseUser();\n                }}\n              >\n                Sign Out\n              </MenuItem>\n            </Menu>\n          </Toolbar>\n        </AppBar>\n        <Toolbar />\n        <Routes>\n          <Route path=\"/login\" element={<Login />} />\n          <Route element={<PrivateRoutes />}>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/home\" element={<HomePage />} />\n            <Route path=\"/resetPassword\" element={<ResetPassword />} />\n            <Route element={<SalesRoutes />}>\n              <Route path=\"/addclient\" element={<AddClient />} />\n            </Route>\n            <Route element={<DriverRoutes />}>\n              <Route path=\"/driverpage\" element={<ScheduledRoutes />} />\n            </Route>\n            <Route element={<DispatchRoutes />}>\n              <Route path=\"/schedule\" element={<Schedule />} />\n              <Route path=\"/addvehicle\" element={<AddVehicle />} exact />\n            </Route>\n            <Route element={<AdminRoutes />}>\n              <Route path=\"/signup\" element={<Auth />} exact />\n              <Route\n                path=\"/resetUserPass\"\n                element={<ResetUserPassword />}\n                exact\n              />\n              <Route path=\"/driverpayroll\" element={<DriverPayroll />} />\n            </Route>\n            <Route path=\"*\" element={<ErrorPage />} />\n          </Route>\n        </Routes>\n      </Router>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\theme.js",[],[],"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\error-page.jsx",[],[],"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\utils\\private_routes.js",[],[],"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\driverpayroll.jsx",[],[],"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\home.jsx",[],[],"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\addvehicle.jsx",["92"],[],"import { useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  AlertTitle,\r\n  TextField,\r\n  Autocomplete,\r\n  Button,\r\n  Snackbar,\r\n  Divider,\r\n} from \"@mui/material\";\r\nimport { MuiColorInput } from \"mui-color-input\";\r\nimport EnhancedTable from \"../utils/generictable\";\r\n\r\nconst AddVehicle = () => {\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [vehicleColor, setVehicleColor] = useState(\"#ffffff\");\r\n  const [vehicleModel, setVehicleModel] = useState(\"\");\r\n  const [vehicleName, setVehicleName] = useState(\"\");\r\n  const [vehicleYear, setVehicleYear] = useState(null);\r\n  const [openSnakbar, setOpenSnakbar] = useState(false);\r\n\r\n  const yearList = () => {\r\n    let max = new Date().getFullYear();\r\n    let min = 1950;\r\n    let years = [];\r\n    for (let i = max; i >= min; i--) years.push(i);\r\n    return years;\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpenSnakbar(false);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    if (vehicleYear === null) {\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n    const response = await fetch(\r\n      `${process.env.REACT_APP_SERVERURL}/createvehicle`,\r\n      {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          vehicleName: vehicleName,\r\n          vehicleModel: vehicleModel,\r\n          vehicleYear: vehicleYear,\r\n          vehicleColor: vehicleColor,\r\n        }),\r\n      }\r\n    );\r\n\r\n    const data = await response.json();\r\n    //if an error happens when signing up set the error\r\n    if (data.detail) {\r\n      setSuccess(false);\r\n      setError(data.detail);\r\n      setOpenSnakbar(true);\r\n    } else {\r\n      //if no error set success to display message\r\n      setMsg(data);\r\n      setError(null);\r\n      setSuccess(true);\r\n      setOpenSnakbar(true);\r\n    }\r\n  };\r\n\r\n  const headings = [\"Vehicle Name\", \"Model\", \"Year\", \"Color\"];\r\n\r\n  return (\r\n    <div className=\"vehicle-container\">\r\n      <div className=\"vehicle-container-box\">\r\n        <form onSubmit={handleSubmit}>\r\n          <TextField\r\n            id=\"vehicleName\"\r\n            required\r\n            label=\"Vehicle Name\"\r\n            type=\"text\"\r\n            placeholder=\"Vehicle Name\"\r\n            value={vehicleName}\r\n            onChange={(e) => setVehicleName(e.target.value)}\r\n          />\r\n          <p></p>\r\n          <TextField\r\n            id=\"vehicleModel\"\r\n            required\r\n            label=\"Model\"\r\n            type=\"text\"\r\n            placeholder=\"Model\"\r\n            value={vehicleModel}\r\n            onChange={(e) => setVehicleModel(e.target.value)}\r\n          />\r\n          <p></p>\r\n          <div\r\n            id=\"vehicle-year-box\"\r\n            style={{ justifyContent: \"center\", display: \"flex\" }}\r\n          >\r\n            <Autocomplete\r\n              id=\"year-options\"\r\n              required\r\n              value={vehicleYear}\r\n              onChange={(e, newValue) => setVehicleYear(newValue)}\r\n              options={yearList()}\r\n              sx={{ width: 200 }}\r\n              getOptionLabel={(option) => option.toString()}\r\n              renderInput={(params) => (\r\n                <TextField required {...params} label=\"Year\" />\r\n              )}\r\n            />\r\n          </div>\r\n          <p></p>\r\n          <MuiColorInput\r\n            id=\"vehicleColor\"\r\n            label=\"Color\"\r\n            value={vehicleColor}\r\n            onChange={(color) => setVehicleColor(color)}\r\n            isAlphaHidden\r\n          />\r\n          <p></p>\r\n          <Button\r\n            variant=\"outlined\"\r\n            type=\"submit\"\r\n            style={{\r\n              backgroundColor: \"rgb(255,255,255)\",\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n          <p></p>\r\n          <Snackbar\r\n            open={error && openSnakbar}\r\n            autoHideDuration={5000}\r\n            onClose={handleClose}\r\n          >\r\n            <Alert severity=\"error\" onClose={handleClose}>\r\n              <AlertTitle>Error</AlertTitle>\r\n              {error}\r\n            </Alert>\r\n          </Snackbar>\r\n\r\n          <Snackbar\r\n            open={success && openSnakbar}\r\n            autoHideDuration={5000}\r\n            onClose={handleClose}\r\n          >\r\n            <Alert severity=\"success\" onClose={handleClose}>\r\n              <AlertTitle>Vehicle Saved</AlertTitle>\r\n              Vehicle created!\r\n            </Alert>\r\n          </Snackbar>\r\n        </form>\r\n        <p></p>\r\n        <div id=\"table-container\">\r\n          <Divider />\r\n          <p></p>\r\n          <EnhancedTable headings={headings} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddVehicle;\r\n","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\driverPage.jsx",[],[],"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\addclient.jsx",[],[],"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\resetPassword.jsx",["93","94"],[],"import { useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  AlertTitle,\r\n  TextField,\r\n  InputAdornment,\r\n  IconButton,\r\n  Button,\r\n  Snackbar,\r\n} from \"@mui/material\";\r\nimport Visibility from \"@mui/icons-material/Visibility\";\r\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nconst ResetPassword = () => {\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showPassword2, setShowPassword2] = useState(false);\r\n  const [currentPassword, setCurrentPassword] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [cookies, setCookie, removeCookie] = useCookies(null);\r\n  const [openSnakbar, setOpenSnakbar] = useState(false);\r\n\r\n  const userName = cookies.Username;\r\n\r\n  //console.log(cookies);\r\n\r\n  const handleReset = async () => {\r\n    const response = await fetch(`${process.env.REACT_APP_SERVERURL}/reset`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        userName: userName,\r\n        currentPassword: currentPassword,\r\n        newPassword: newPassword,\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    //if an error happens when signing up set the error\r\n    if (data.detail) {\r\n      setSuccess(false);\r\n      setError(data.detail);\r\n      setOpenSnakbar(true);\r\n    } else {\r\n      //if no error set success to display message\r\n      setError(null);\r\n      setSuccess(true);\r\n      setOpenSnakbar(true);\r\n\r\n      //Clear fields\r\n      setCurrentPassword(\"\");\r\n      setNewPassword(\"\");\r\n      //reload the page\r\n      //window.location.reload();\r\n    }\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpenSnakbar(false);\r\n  };\r\n\r\n  const isDisabled = !userName || !currentPassword || !newPassword;\r\n\r\n  return (\r\n    <div className=\"auth-container\">\r\n      <div className=\"auth-container-box\">\r\n        <form>\r\n          <h2>Please enter your current and new password</h2>\r\n          <TextField\r\n            id=\"currentPassword\"\r\n            required\r\n            label=\"Current Password\"\r\n            type={showPassword ? \"text\" : \"password\"}\r\n            placeholder=\"Enter your current password\"\r\n            value={currentPassword}\r\n            onChange={(e) => setCurrentPassword(e.target.value)}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton onClick={() => setShowPassword((show) => !show)}>\r\n                    {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <p></p>\r\n          <TextField\r\n            id=\"newPassword\"\r\n            required\r\n            label=\"New Password\"\r\n            type={showPassword2 ? \"text\" : \"password\"}\r\n            placeholder=\"Enter your new password\"\r\n            value={newPassword}\r\n            onChange={(e) => setNewPassword(e.target.value)}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton onClick={() => setShowPassword2((show) => !show)}>\r\n                    {showPassword2 ? <VisibilityOff /> : <Visibility />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <p></p>\r\n\r\n          <Snackbar\r\n            open={error && openSnakbar}\r\n            autoHideDuration={5000}\r\n            onClose={handleClose}\r\n          >\r\n            <Alert severity=\"error\" onClose={handleClose}>\r\n              <AlertTitle>Error</AlertTitle>\r\n              {error}\r\n            </Alert>\r\n          </Snackbar>\r\n\r\n          <Snackbar\r\n            open={success && openSnakbar}\r\n            autoHideDuration={5000}\r\n            onClose={handleClose}\r\n          >\r\n            <Alert severity=\"success\" onClose={handleClose}>\r\n              <AlertTitle>Password updated</AlertTitle>\r\n              Your password was updated with success.\r\n            </Alert>\r\n          </Snackbar>\r\n        </form>\r\n        <p></p>\r\n        <div className=\"auth-options\">\r\n          <Button\r\n            disabled={isDisabled}\r\n            variant=\"outlined\"\r\n            onClick={handleReset}\r\n            style={{\r\n              backgroundColor: \"rgb(255,255,255)\",\r\n            }}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\schedule.jsx",[],[],"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\login.jsx",["95","96"],[],"import { useReducer, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Button, Snackbar, Alert, AlertTitle } from \"@mui/material\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nconst Login = () => {\r\n  const [formData, setFormData] = useReducer(\r\n    (formData, newItem) => {\r\n      return { ...formData, ...newItem };\r\n    },\r\n    { userName: \"\", password: \"\" }\r\n  );\r\n\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [cookies, setCookie, removeCookie] = useCookies(null);\r\n  const [openSnakbar, setOpenSnakbar] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const doLogin = () => {\r\n    try {\r\n      login(formData.userName, formData.password);\r\n    } catch (error) {\r\n      setErrorMessage(\"Incorrect password\");\r\n    }\r\n  };\r\n\r\n  const login = async (userName, password) => {\r\n    //Hit API to pull the username to check the password\r\n    const response = await fetch(\r\n      `${process.env.REACT_APP_SERVERURL}/api/login`,\r\n      {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ userName, password }),\r\n      }\r\n    );\r\n\r\n    const data = await response.json();\r\n    console.log(data);\r\n    //if an error happens when signing up set the error\r\n    if (data.detail) {\r\n      setErrorMessage(data.detail);\r\n      setOpenSnakbar(true);\r\n    } else {\r\n      //if no error set cookies\r\n      setErrorMessage(null);\r\n\r\n      //set a time to expire the cookies\r\n      const date = Date.now();\r\n      const expireDate = new Date(date + 60 * 60 * 1000);\r\n\r\n      //set the cookies\r\n      setCookie(\"Username\", data.username, {\r\n        expires: expireDate,\r\n      });\r\n      console.log(date);\r\n      setCookie(\"AuthToken\", data.token, { expires: expireDate });\r\n      navigate(\"/home\");\r\n      //set props\r\n      //props.user({ name: data.username, type: data.usertype, isAuth: true });\r\n      //reload the page\r\n      //window.location.reload();\r\n    }\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpenSnakbar(false);\r\n  };\r\n\r\n  const keyEnterHandler = (e) => {\r\n    if (e.key === \"Enter\") document.getElementById(\"loginButton\").focus();\r\n  };\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <h2>Phoenix Bus - Login</h2>\r\n      <div className=\"inputs\">\r\n        <div className=\"input\">\r\n          <input\r\n            id=\"userName\"\r\n            type=\"text\"\r\n            value={formData.userName}\r\n            onChange={(e) => setFormData({ userName: e.target.value })}\r\n          />\r\n        </div>\r\n        <div className=\"input\">\r\n          <input\r\n            id=\"password\"\r\n            type=\"password\"\r\n            value={formData.password}\r\n            onChange={(e) => setFormData({ password: e.target.value })}\r\n            onKeyDownCapture={keyEnterHandler}\r\n          />\r\n        </div>\r\n        <p></p>\r\n        <div className=\"button\">\r\n          <Button id=\"loginButton\" variant=\"outlined\" onClick={doLogin}>\r\n            Log in\r\n          </Button>\r\n        </div>\r\n        <Snackbar\r\n          open={errorMessage && openSnakbar}\r\n          autoHideDuration={5000}\r\n          onClose={handleClose}\r\n        >\r\n          <Alert severity=\"error\" onClose={handleClose}>\r\n            <AlertTitle>Error</AlertTitle>\r\n            {errorMessage}\r\n          </Alert>\r\n        </Snackbar>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\admin\\Auth.jsx",[],[],"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\pages\\admin\\ResetUserPassword.jsx",[],[],"C:\\Projects\\PhoenixBus\\SecondApp\\phoenixbus2\\client\\src\\utils\\generictable.jsx",[],[],{"ruleId":"97","severity":1,"message":"98","line":47,"column":19,"nodeType":"99","messageId":"100","endLine":47,"endColumn":28},{"ruleId":"101","severity":2,"message":"102","line":204,"column":32,"nodeType":"99","messageId":"103","endLine":204,"endColumn":36,"suppressions":"104"},{"ruleId":"101","severity":2,"message":"102","line":207,"column":32,"nodeType":"99","messageId":"103","endLine":207,"endColumn":36,"suppressions":"105"},{"ruleId":"101","severity":2,"message":"102","line":259,"column":32,"nodeType":"99","messageId":"103","endLine":259,"endColumn":36,"suppressions":"106"},{"ruleId":"101","severity":2,"message":"102","line":261,"column":32,"nodeType":"99","messageId":"103","endLine":261,"endColumn":36,"suppressions":"107"},{"ruleId":"97","severity":1,"message":"108","line":17,"column":10,"nodeType":"99","messageId":"100","endLine":17,"endColumn":13},{"ruleId":"97","severity":1,"message":"98","line":22,"column":19,"nodeType":"99","messageId":"100","endLine":22,"endColumn":28},{"ruleId":"97","severity":1,"message":"109","line":22,"column":30,"nodeType":"99","messageId":"100","endLine":22,"endColumn":42},{"ruleId":"97","severity":1,"message":"110","line":15,"column":10,"nodeType":"99","messageId":"100","endLine":15,"endColumn":17},{"ruleId":"97","severity":1,"message":"109","line":15,"column":30,"nodeType":"99","messageId":"100","endLine":15,"endColumn":42},"no-unused-vars","'setCookie' is assigned a value but never used.","Identifier","unusedVar","no-restricted-globals","Unexpected use of 'open'.","defaultMessage",["111"],["112","113"],["114"],["115"],"'msg' is assigned a value but never used.","'removeCookie' is assigned a value but never used.","'cookies' is assigned a value but never used.",{"kind":"116","justification":"117"},{"kind":"116","justification":"117"},{"kind":"116","justification":"117"},{"kind":"116","justification":"117"},{"kind":"116","justification":"117"},"directive",""]