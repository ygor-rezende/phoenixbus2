{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\PhoenixBus\\\\SecondApp\\\\client\\\\src\\\\utils\\\\private_routes.js\",\n  _s = $RefreshSig$();\nimport { Outlet, Navigate } from \"react-router-dom\";\nimport { useCookies } from \"react-cookie\";\nimport jwt_decode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminRoutes = () => {\n  _s();\n  const [cookies] = useCookies(null);\n\n  // let auth = { token: true };\n  // return auth.token ? <Outlet /> : <Navigate to=\"/login\" />;\n\n  //if there is an user logged in\n  let auth = cookies.Username ? true : false;\n  if (auth) {\n    //decode the token\n    const decoded = jwt_decode(cookies.AuthToken);\n    //if user is admin it navigate to the route requested. If not navigate to the login page\n    return decoded.userType === \"admin\" ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 43\n    }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 56\n    }, this);\n  }\n};\n_s(AdminRoutes, \"KWItf4Qn7XyeOw4JKNC6dqw2Uu4=\", false, function () {\n  return [useCookies];\n});\n_c = AdminRoutes;\nexport default AdminRoutes;\nvar _c;\n$RefreshReg$(_c, \"AdminRoutes\");","map":{"version":3,"names":["Outlet","Navigate","useCookies","jwt_decode","jsxDEV","_jsxDEV","AdminRoutes","_s","cookies","auth","Username","decoded","AuthToken","userType","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Projects/PhoenixBus/SecondApp/client/src/utils/private_routes.js"],"sourcesContent":["import { Outlet, Navigate } from \"react-router-dom\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nconst AdminRoutes = () => {\r\n  const [cookies] = useCookies(null);\r\n\r\n  // let auth = { token: true };\r\n  // return auth.token ? <Outlet /> : <Navigate to=\"/login\" />;\r\n\r\n  //if there is an user logged in\r\n  let auth = cookies.Username ? true : false;\r\n  if (auth) {\r\n    //decode the token\r\n    const decoded = jwt_decode(cookies.AuthToken);\r\n    //if user is admin it navigate to the route requested. If not navigate to the login page\r\n    return decoded.userType === \"admin\" ? <Outlet /> : <Navigate to=\"/login\" />;\r\n  }\r\n};\r\n\r\nexport default AdminRoutes;\r\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,kBAAkB;AACnD,SAASC,UAAU,QAAQ,cAAc;AACzC,OAAOC,UAAU,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,CAAC,GAAGN,UAAU,CAAC,IAAI,CAAC;;EAElC;EACA;;EAEA;EACA,IAAIO,IAAI,GAAGD,OAAO,CAACE,QAAQ,GAAG,IAAI,GAAG,KAAK;EAC1C,IAAID,IAAI,EAAE;IACR;IACA,MAAME,OAAO,GAAGR,UAAU,CAACK,OAAO,CAACI,SAAS,CAAC;IAC7C;IACA,OAAOD,OAAO,CAACE,QAAQ,KAAK,OAAO,gBAAGR,OAAA,CAACL,MAAM;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGZ,OAAA,CAACJ,QAAQ;MAACiB,EAAE,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7E;AACF,CAAC;AAACV,EAAA,CAdID,WAAW;EAAA,QACGJ,UAAU;AAAA;AAAAiB,EAAA,GADxBb,WAAW;AAgBjB,eAAeA,WAAW;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}