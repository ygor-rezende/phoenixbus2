{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _ClearIcon, _ArrowDropDownIcon;\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"clearOnBlur\", \"clearOnEscape\", \"defaultValue\", \"disableCloseOnSelect\", \"disabledItemsFocusable\", \"disableListWrap\", \"filterSelectedOptions\", \"handleHomeEndKeys\", \"includeInputInList\", \"openOnFocus\", \"selectOnFocus\"],\n  _excluded2 = [\"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"autoFocus\", \"clearIcon\", \"clearText\", \"closeText\", \"disableClearable\", \"disabled\", \"endDecorator\", \"error\", \"filterOptions\", \"forcePopupIcon\", \"freeSolo\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"id\", \"inputValue\", \"limitTags\", \"loading\", \"loadingText\", \"multiple\", \"name\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openText\", \"options\", \"placeholder\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderOption\", \"renderTags\", \"required\", \"type\", \"startDecorator\", \"size\", \"color\", \"variant\", \"value\", \"component\", \"slots\", \"slotProps\"],\n  _excluded3 = [\"onDelete\"],\n  _excluded4 = [\"onBlur\", \"onFocus\", \"onMouseDown\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType, unstable_useForkRef as useForkRef, unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { useAutocomplete } from '@mui/base/useAutocomplete';\nimport { Popper } from '@mui/base/Popper';\nimport { useThemeProps } from '../styles';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport styled from '../styles/styled';\nimport { VariantColorProvider, getChildVariantAndColor } from '../styles/variantColorInheritance';\n// slot components\nimport { StyledIconButton } from '../IconButton/IconButton';\n// default render components\nimport Chip, { chipClasses } from '../Chip';\nimport ChipDelete from '../ChipDelete';\nimport { StyledInputRoot, StyledInputHtml, StyledInputStartDecorator, StyledInputEndDecorator } from '../Input/Input';\nimport List from '../List';\nimport ListProvider from '../List/ListProvider';\nimport ListSubheader from '../ListSubheader';\nimport ListItem from '../ListItem';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport { StyledAutocompleteListbox } from '../AutocompleteListbox/AutocompleteListbox';\nimport { StyledAutocompleteOption } from '../AutocompleteOption/AutocompleteOption';\nimport useSlot from '../utils/useSlot';\nimport ColorInversion, { useColorInversion } from '../styles/ColorInversion';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.contains(document.activeElement);\n// @ts-ignore\nconst defaultGetOptionLabel = option => {\n  var _option$label;\n  return (_option$label = option.label) != null ? _option$label : option;\n};\nconst defaultLimitTagsText = more => `+${more}`;\nconst defaultRenderGroup = params => /*#__PURE__*/_jsxs(ListItem, {\n  nested: true,\n  children: [/*#__PURE__*/_jsx(ListSubheader, {\n    sticky: true,\n    children: params.group\n  }), /*#__PURE__*/_jsx(List, {\n    children: params.children\n  })]\n}, params.key);\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    focused,\n    hasClearIcon,\n    hasPopupIcon,\n    popupOpen,\n    variant,\n    color,\n    size,\n    multiple\n  } = ownerState;\n  const slots = {\n    root: ['root', focused && 'focused', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],\n    wrapper: ['wrapper', multiple && 'multiple'],\n    input: ['input'],\n    startDecorator: ['startDecorator'],\n    endDecorator: ['endDecorator'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen', disabled && 'disabled'],\n    listbox: ['listbox'],\n    option: ['option'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    limitTag: ['limitTag']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, {});\n};\nconst AutocompleteRoot = styled(StyledInputRoot, {\n  name: 'JoyAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  ownerState\n}) => _extends({\n  '--Autocomplete-wrapperGap': '3px'\n}, ownerState.size === 'lg' && {\n  '--Autocomplete-wrapperGap': '4px'\n}, {\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  }\n}, ownerState.multiple && !ownerState.startDecorator && {\n  paddingInlineStart: 0\n}));\n\n/**\n * Wrapper groups the chips (multi selection) and the input\n * so that start/end decorators can stay in the normal flow.\n */\nconst AutocompleteWrapper = styled('div', {\n  name: 'JoyAutocomplete',\n  slot: 'Wrapper',\n  overridesResolver: (props, styles) => styles.wrapper\n})(({\n  ownerState\n}) => ({\n  flex: 1,\n  // stretch to fill the root slot\n  minWidth: 0,\n  // won't push end decorator out of the autocomplete\n  display: 'flex',\n  alignItems: 'center',\n  flexWrap: 'wrap',\n  [`&.${autocompleteClasses.multiple}`]: _extends({\n    paddingBlockEnd: 'min(var(--_Input-paddingBlock), var(--Autocomplete-wrapperGap))'\n  }, ownerState.startDecorator && Array.isArray(ownerState.value) && ownerState.value.length > 0 && {\n    marginBlockStart: 'min(var(--_Input-paddingBlock) - var(--Autocomplete-wrapperGap), 0px)',\n    marginInlineStart: 'calc(-1 * var(--Autocomplete-wrapperGap))',\n    [`& .${autocompleteClasses.input}`]: {\n      marginInlineStart: 'max(var(--Autocomplete-wrapperGap), var(--Input-gap))'\n    }\n  }),\n  [`& .${chipClasses.root}`]: {\n    // TODO: use flexbox `gap` later.\n    minWidth: 0,\n    marginInlineStart: 'var(--Autocomplete-wrapperGap)',\n    marginBlockStart: 'var(--Autocomplete-wrapperGap)'\n  }\n}));\nconst AutocompleteInput = styled(StyledInputHtml, {\n  name: 'JoyAutocomplete',\n  slot: 'Input',\n  overridesResolver: (props, styles) => styles.input\n})(({\n  ownerState\n}) => _extends({\n  minWidth: 30,\n  minHeight: 'var(--Chip-minHeight)'\n}, ownerState.multiple && _extends({\n  marginBlockStart: 'var(--Autocomplete-wrapperGap)'\n}, !ownerState.startDecorator && {\n  marginInlineStart: 'var(--Input-paddingInline)'\n})));\nconst AutocompleteStartDecorator = styled(StyledInputStartDecorator, {\n  name: 'JoyAutocomplete',\n  slot: 'StartDecorator',\n  overridesResolver: (props, styles) => styles.startDecorator\n})({});\nconst AutocompleteEndDecorator = styled(StyledInputEndDecorator, {\n  name: 'JoyAutocomplete',\n  slot: 'EndDecorator',\n  overridesResolver: (props, styles) => styles.endDecorator\n})(({\n  ownerState\n}) => _extends({}, (ownerState.hasClearIcon || ownerState.hasPopupIcon) && {\n  '--Button-margin': '0px',\n  '--IconButton-margin': '0px',\n  '--Icon-margin': '0px'\n}));\nconst AutocompleteClearIndicator = styled(StyledIconButton, {\n  name: 'JoyAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})(({\n  ownerState\n}) => _extends({\n  alignSelf: 'center'\n}, !ownerState.hasPopupIcon && {\n  marginInlineEnd: 'calc(var(--Input-decoratorChildOffset) * -1)'\n}, {\n  marginInlineStart: 'calc(var(--_Input-paddingBlock) / 2)',\n  visibility: ownerState.focused ? 'visible' : 'hidden'\n}));\nconst AutocompletePopupIndicator = styled(StyledIconButton, {\n  name: 'JoyAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: (props, styles) => styles.popupIndicator\n})({\n  alignSelf: 'center',\n  marginInlineStart: 'calc(var(--_Input-paddingBlock) / 2)',\n  marginInlineEnd: 'calc(var(--Input-decoratorChildOffset) * -1)',\n  [`&.${autocompleteClasses.popupIndicatorOpen}`]: {\n    transform: 'rotate(180deg)',\n    '--Icon-color': 'currentColor'\n  }\n});\nconst AutocompleteListbox = styled(StyledAutocompleteListbox, {\n  name: 'JoyAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  // `unstable_popup-zIndex` is a private variable that lets other component, e.g. Modal, to override the z-index so that the listbox can be displayed above the Modal.\n  zIndex: `var(--unstable_popup-zIndex, ${theme.vars.zIndex.popup})`\n}));\nconst AutocompleteOption = styled(StyledAutocompleteOption, {\n  name: 'JoyAutocomplete',\n  slot: 'Option',\n  overridesResolver: (props, styles) => styles.option\n})({});\nconst AutocompleteLoading = styled(ListItem, {\n  name: 'JoyAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary\n}));\nconst AutocompleteNoOptions = styled(ListItem, {\n  name: 'JoyAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary\n}));\nconst AutocompleteLimitTag = styled('div', {\n  name: 'JoyAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})({\n  marginInlineStart: 'calc(var(--Input-paddingInline) / 2)',\n  marginBlockStart: 'var(--_Input-paddingBlock)'\n});\nconst excludeUseAutocompleteParams = _ref => {\n  let other = _objectWithoutPropertiesLoose(_ref, _excluded);\n  return other;\n};\n/**\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/joy-ui/react-autocomplete/)\n *\n * API:\n *\n * - [Autocomplete API](https://mui.com/joy-ui/api/autocomplete/)\n */\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _ref2, _inProps$error, _ref3, _inProps$size, _inProps$color, _formControl$color, _ref4;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyAutocomplete'\n  });\n  const {\n      'aria-describedby': ariaDescribedby,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      autoFocus,\n      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n        fontSize: \"md\"\n      })),\n      clearText = 'Clear',\n      closeText = 'Close',\n      disableClearable = false,\n      disabled: disabledProp,\n      endDecorator,\n      error: errorProp = false,\n      forcePopupIcon = 'auto',\n      freeSolo = false,\n      getLimitTagsText = defaultLimitTagsText,\n      getOptionLabel = defaultGetOptionLabel,\n      groupBy,\n      id,\n      limitTags = -1,\n      loading = false,\n      loadingText = 'Loading…',\n      multiple = false,\n      name,\n      noOptionsText = 'No options',\n      openText = 'Open',\n      placeholder,\n      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n      readOnly = false,\n      renderGroup = defaultRenderGroup,\n      renderOption: renderOptionProp,\n      renderTags,\n      required,\n      type,\n      startDecorator,\n      size: sizeProp = 'md',\n      color: colorProp = 'neutral',\n      variant = 'outlined',\n      component,\n      slots = {},\n      slotProps = {}\n    } = props,\n    otherProps = _objectWithoutPropertiesLoose(props, _excluded2);\n  const other = excludeUseAutocompleteParams(otherProps);\n  const {\n    getColor\n  } = useColorInversion(variant);\n  const formControl = React.useContext(FormControlContext);\n  const error = (_ref2 = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref2 : errorProp;\n  const size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;\n  const rootColor = (_inProps$color = inProps.color) != null ? _inProps$color : error ? 'danger' : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp;\n  const color = getColor(inProps.color, rootColor);\n  const disabled = (_ref4 = disabledProp != null ? disabledProp : formControl == null ? void 0 : formControl.disabled) != null ? _ref4 : false;\n  const {\n    getRootProps,\n    getInputProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,\n    componentName: 'Autocomplete',\n    unstable_classNamePrefix: 'Mui',\n    unstable_isActiveElementInListbox: defaultIsActiveElementInListbox\n  }));\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    onClick: handleRootOnClick\n  } = getRootProps();\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = _extends({}, props, {\n    value,\n    disabled,\n    focused,\n    getOptionLabel,\n    hasOptions: !!groupedOptions.length,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size,\n    color,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  let selectedOptions;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => {\n      const _getTagProps = getTagProps(params),\n        {\n          onDelete\n        } = _getTagProps,\n        tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded3);\n      return _extends({\n        disabled,\n        size,\n        onClick: onDelete\n      }, tagProps);\n    };\n    if (renderTags) {\n      selectedOptions = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      selectedOptions = value.map((option, index) => {\n        return /*#__PURE__*/_jsx(Chip, {\n          size: size,\n          variant: \"soft\",\n          color: color === 'context' ? undefined : 'neutral',\n          endDecorator: /*#__PURE__*/_jsx(ChipDelete, _extends({}, getCustomizedTagProps({\n            index\n          }))),\n          children: getOptionLabel(option)\n        }, index);\n      });\n    }\n  }\n  const rootRef = useForkRef(ref, setAnchorEl);\n  const rootStateClasses = {\n    [autocompleteClasses.disabled]: disabled,\n    [autocompleteClasses.error]: error,\n    [autocompleteClasses.focused]: focused,\n    [autocompleteClasses.formControl]: Boolean(formControl)\n  };\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref: rootRef,\n    className: [classes.root, rootStateClasses],\n    elementType: AutocompleteRoot,\n    externalForwardedProps,\n    ownerState,\n    getSlotProps: getRootProps,\n    additionalProps: {\n      onClick: event => {\n        if (handleRootOnClick) {\n          handleRootOnClick(event);\n        }\n        if (event.currentTarget === event.target && handleInputMouseDown) {\n          handleInputMouseDown(event);\n        }\n      }\n    }\n  });\n  const [SlotWrapper, wrapperProps] = useSlot('wrapper', {\n    className: classes.wrapper,\n    elementType: AutocompleteWrapper,\n    externalForwardedProps,\n    ownerState\n  });\n  const inputStateClasses = {\n    [autocompleteClasses.disabled]: disabled\n  };\n  const [SlotInput, inputProps] = useSlot('input', {\n    className: [classes.input, inputStateClasses],\n    elementType: AutocompleteInput,\n    getSlotProps: handlers => {\n      const _getInputProps = getInputProps(),\n        {\n          onBlur,\n          onFocus,\n          onMouseDown\n        } = _getInputProps,\n        inputSlotProps = _objectWithoutPropertiesLoose(_getInputProps, _excluded4);\n      return _extends({}, inputSlotProps, {\n        onBlur: event => {\n          var _handlers$onBlur;\n          onBlur == null ? void 0 : onBlur(event);\n          (_handlers$onBlur = handlers.onBlur) == null ? void 0 : _handlers$onBlur.call(handlers, event);\n        },\n        onFocus: event => {\n          var _handlers$onFocus;\n          onFocus == null ? void 0 : onFocus(event);\n          (_handlers$onFocus = handlers.onFocus) == null ? void 0 : _handlers$onFocus.call(handlers, event);\n        },\n        onMouseDown: event => {\n          var _handlers$onMouseDown;\n          onMouseDown == null ? void 0 : onMouseDown(event);\n          (_handlers$onMouseDown = handlers.onMouseDown) == null ? void 0 : _handlers$onMouseDown.call(handlers, event);\n        }\n      });\n    },\n    externalForwardedProps,\n    ownerState,\n    additionalProps: {\n      autoFocus,\n      placeholder,\n      name,\n      readOnly,\n      disabled,\n      required: required != null ? required : formControl == null ? void 0 : formControl.required,\n      type,\n      'aria-invalid': error || undefined,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      'aria-describedby': ariaDescribedby != null ? ariaDescribedby : formControl == null ? void 0 : formControl['aria-describedby']\n    }\n  });\n  const [SlotStartDecorator, startDecoratorProps] = useSlot('startDecorator', {\n    className: classes.startDecorator,\n    elementType: AutocompleteStartDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotEndDecorator, endDecoratorProps] = useSlot('endDecorator', {\n    className: classes.endDecorator,\n    elementType: AutocompleteEndDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotClearIndicator, clearIndicatorProps] = useSlot('clearIndicator', {\n    className: classes.clearIndicator,\n    elementType: AutocompleteClearIndicator,\n    getSlotProps: getClearProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || getChildVariantAndColor(variant, rootColor).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, rootColor).color || 'neutral',\n      disableColorInversion: !!inProps.color\n    }),\n    additionalProps: {\n      'aria-label': clearText,\n      title: clearText\n    }\n  });\n  const [SlotPopupIndicator, popupIndicatorProps] = useSlot('popupIndicator', {\n    className: classes.popupIndicator,\n    elementType: AutocompletePopupIndicator,\n    getSlotProps: getPopupIndicatorProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || getChildVariantAndColor(variant, rootColor).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, rootColor).color || 'neutral',\n      disableColorInversion: !!inProps.color\n    }),\n    additionalProps: {\n      disabled,\n      'aria-label': popupOpen ? closeText : openText,\n      title: popupOpen ? closeText : openText,\n      type: 'button'\n    }\n  });\n  const [SlotListbox, listboxProps] = useSlot('listbox', {\n    className: classes.listbox,\n    elementType: AutocompleteListbox,\n    getSlotProps: getListboxProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || variant,\n      color: mergedProps.color || (!mergedProps.disablePortal ? rootColor : color),\n      disableColorInversion: !mergedProps.disablePortal\n    }),\n    additionalProps: {\n      anchorEl,\n      open: popupOpen,\n      style: anchorEl ? {\n        width: anchorEl.clientWidth\n      } : {}\n    }\n  });\n  const [SlotLoading, loadingProps] = useSlot('loading', {\n    className: classes.loading,\n    elementType: AutocompleteLoading,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotNoOptions, noOptionsProps] = useSlot('noOptions', {\n    className: classes.noOptions,\n    elementType: AutocompleteNoOptions,\n    externalForwardedProps,\n    ownerState,\n    additionalProps: {\n      role: 'presentation',\n      onMouseDown: event => {\n        // Prevent input blur when interacting with the \"no options\" content\n        event.preventDefault();\n      }\n    }\n  });\n  const [SlotLimitTag, limitTagProps] = useSlot('limitTag', {\n    className: classes.limitTag,\n    elementType: AutocompleteLimitTag,\n    externalForwardedProps,\n    ownerState\n  });\n  if (limitTags > -1 && Array.isArray(selectedOptions)) {\n    const more = selectedOptions.length - limitTags;\n    if (!focused && more > 0) {\n      selectedOptions = selectedOptions.splice(0, limitTags);\n      selectedOptions.push( /*#__PURE__*/_jsx(SlotLimitTag, _extends({}, limitTagProps, {\n        children: getLimitTagsText(more)\n      }), selectedOptions.length));\n    }\n  }\n  const [SlotOption, baseOptionProps] = useSlot('option', {\n    className: classes.option,\n    elementType: AutocompleteOption,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      variant: mergedProps.variant || getChildVariantAndColor(variant, rootColor).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, rootColor).color || 'neutral',\n      disableColorInversion: !listboxProps.disablePortal\n    }),\n    additionalProps: {\n      as: 'li'\n    }\n  });\n  const defaultRenderOption = (optionProps, option) => /*#__PURE__*/_jsx(SlotOption, _extends({}, optionProps, {\n    children: getOptionLabel(option)\n  }));\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, baseOptionProps, optionProps), option, {\n      // `aria-selected` prop will always by boolean, see useAutocomplete hook.\n      selected: !!optionProps['aria-selected'],\n      inputValue,\n      ownerState\n    });\n  };\n\n  // Wait for `listboxProps` because `slotProps.listbox` could be a function.\n  const modifiers = React.useMemo(() => [{\n    name: 'offset',\n    options: {\n      offset: [0, 4]\n    }\n  }, ...(listboxProps.modifiers || [])], [listboxProps.modifiers]);\n  let popup = null;\n  if (anchorEl) {\n    var _listboxProps$ownerSt, _props$slots;\n    popup = /*#__PURE__*/_jsx(VariantColorProvider, {\n      variant: variant,\n      color: rootColor,\n      children: /*#__PURE__*/_jsx(ListProvider, {\n        nested: true,\n        children: /*#__PURE__*/_jsxs(SlotListbox, _extends({}, listboxProps, {\n          className: clsx(listboxProps.className, ((_listboxProps$ownerSt = listboxProps.ownerState) == null ? void 0 : _listboxProps$ownerSt.color) === 'context' && autocompleteClasses.colorContext)\n          // @ts-ignore internal logic (too complex to typed PopperOwnProps to SlotListbox but this should be removed when we have `usePopper`)\n          ,\n\n          modifiers: modifiers\n        }, !((_props$slots = props.slots) != null && _props$slots.listbox) && {\n          as: Popper,\n          slots: {\n            root: listboxProps.as || 'ul'\n          }\n        }, {\n          children: [groupedOptions.map((option, index) => {\n            if (groupBy) {\n              const typedOption = option;\n              return renderGroup({\n                key: String(typedOption.key),\n                group: typedOption.group,\n                children: typedOption.options.map((option2, index2) => renderListOption(option2, typedOption.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          }), loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(SlotLoading, _extends({}, loadingProps, {\n            children: loadingText\n          })) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(SlotNoOptions, _extends({}, noOptionsProps, {\n            children: noOptionsText\n          })) : null]\n        }))\n      })\n    });\n    if (!listboxProps.disablePortal) {\n      // For portal popup, the children should not inherit color inversion from the upper parent.\n      popup = /*#__PURE__*/_jsx(ColorInversion.Provider, {\n        value: undefined,\n        children: popup\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {\n      children: [startDecorator && /*#__PURE__*/_jsx(SlotStartDecorator, _extends({}, startDecoratorProps, {\n        children: startDecorator\n      })), /*#__PURE__*/_jsxs(SlotWrapper, _extends({}, wrapperProps, {\n        children: [selectedOptions, /*#__PURE__*/_jsx(SlotInput, _extends({}, inputProps))]\n      })), endDecorator && /*#__PURE__*/_jsx(SlotEndDecorator, _extends({}, endDecoratorProps, {\n        children: endDecorator\n      })), hasClearIcon ? /*#__PURE__*/_jsx(SlotClearIndicator, _extends({}, clearIndicatorProps, {\n        children: clearIcon\n      })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(SlotPopupIndicator, _extends({}, popupIndicatorProps, {\n        children: popupIcon\n      })) : null]\n    })), popup]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Identifies the element (or elements) that describes the object.\n   * @see aria-labelledby\n   */\n  'aria-describedby': PropTypes.string,\n  /**\n   * Defines a string value that labels the current element.\n   * @see aria-labelledby.\n   */\n  'aria-label': PropTypes.string,\n  /**\n   * Identifies the element (or elements) that labels the current element.\n   * @see aria-describedby.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"md\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Trailing adornment for this input.\n   */\n  endDecorator: PropTypes.node,\n  /**\n   * If `true`, the `input` will indicate an error.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {string | number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more: string | number) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The input placeholder\n   */\n  placeholder: PropTypes.string,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'md'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    endDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    limitTag: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    loading: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    noOptions: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    option: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popupIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    startDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    wrapper: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    clearIndicator: PropTypes.elementType,\n    endDecorator: PropTypes.elementType,\n    input: PropTypes.elementType,\n    limitTag: PropTypes.elementType,\n    listbox: PropTypes.elementType,\n    loading: PropTypes.elementType,\n    noOptions: PropTypes.elementType,\n    option: PropTypes.elementType,\n    popupIndicator: PropTypes.elementType,\n    root: PropTypes.elementType,\n    startDecorator: PropTypes.elementType,\n    wrapper: PropTypes.elementType\n  }),\n  /**\n   * Leading adornment for this input.\n   */\n  startDecorator: PropTypes.node,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid'])\n} : void 0;\nexport default Autocomplete;","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_ClearIcon","_ArrowDropDownIcon","_excluded","_excluded2","_excluded3","_excluded4","React","PropTypes","clsx","chainPropTypes","integerPropType","unstable_useForkRef","useForkRef","unstable_capitalize","capitalize","unstable_composeClasses","composeClasses","useAutocomplete","Popper","useThemeProps","ClearIcon","ArrowDropDownIcon","styled","VariantColorProvider","getChildVariantAndColor","StyledIconButton","Chip","chipClasses","ChipDelete","StyledInputRoot","StyledInputHtml","StyledInputStartDecorator","StyledInputEndDecorator","List","ListProvider","ListSubheader","ListItem","autocompleteClasses","getAutocompleteUtilityClass","FormControlContext","StyledAutocompleteListbox","StyledAutocompleteOption","useSlot","ColorInversion","useColorInversion","jsx","_jsx","jsxs","_jsxs","defaultIsActiveElementInListbox","listboxRef","current","contains","document","activeElement","defaultGetOptionLabel","option","_option$label","label","defaultLimitTagsText","more","defaultRenderGroup","params","nested","children","sticky","group","key","useUtilityClasses","ownerState","disabled","focused","hasClearIcon","hasPopupIcon","popupOpen","variant","color","size","multiple","slots","root","wrapper","input","startDecorator","endDecorator","clearIndicator","popupIndicator","listbox","loading","noOptions","limitTag","AutocompleteRoot","name","slot","overridesResolver","props","styles","visibility","paddingInlineStart","AutocompleteWrapper","flex","minWidth","display","alignItems","flexWrap","paddingBlockEnd","Array","isArray","value","length","marginBlockStart","marginInlineStart","AutocompleteInput","minHeight","AutocompleteStartDecorator","AutocompleteEndDecorator","AutocompleteClearIndicator","alignSelf","marginInlineEnd","AutocompletePopupIndicator","popupIndicatorOpen","transform","AutocompleteListbox","theme","zIndex","vars","popup","AutocompleteOption","AutocompleteLoading","palette","text","secondary","AutocompleteNoOptions","AutocompleteLimitTag","excludeUseAutocompleteParams","_ref","other","Autocomplete","forwardRef","inProps","ref","_ref2","_inProps$error","_ref3","_inProps$size","_inProps$color","_formControl$color","_ref4","ariaDescribedby","ariaLabel","ariaLabelledby","autoFocus","clearIcon","fontSize","clearText","closeText","disableClearable","disabledProp","error","errorProp","forcePopupIcon","freeSolo","getLimitTagsText","getOptionLabel","groupBy","id","limitTags","loadingText","noOptionsText","openText","placeholder","popupIcon","readOnly","renderGroup","renderOption","renderOptionProp","renderTags","required","type","sizeProp","colorProp","component","slotProps","otherProps","getColor","formControl","useContext","rootColor","getRootProps","getInputProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","dirty","focusedTag","anchorEl","setAnchorEl","inputValue","groupedOptions","htmlFor","componentName","unstable_classNamePrefix","unstable_isActiveElementInListbox","onMouseDown","handleInputMouseDown","onClick","handleRootOnClick","hasOptions","inputFocused","classes","externalForwardedProps","selectedOptions","getCustomizedTagProps","_getTagProps","onDelete","tagProps","map","index","undefined","rootRef","rootStateClasses","Boolean","SlotRoot","rootProps","className","elementType","getSlotProps","additionalProps","event","currentTarget","target","SlotWrapper","wrapperProps","inputStateClasses","SlotInput","inputProps","handlers","_getInputProps","onBlur","onFocus","inputSlotProps","_handlers$onBlur","call","_handlers$onFocus","_handlers$onMouseDown","SlotStartDecorator","startDecoratorProps","SlotEndDecorator","endDecoratorProps","SlotClearIndicator","clearIndicatorProps","getSlotOwnerState","mergedProps","disableColorInversion","title","SlotPopupIndicator","popupIndicatorProps","SlotListbox","listboxProps","disablePortal","open","style","width","clientWidth","SlotLoading","loadingProps","SlotNoOptions","noOptionsProps","role","preventDefault","SlotLimitTag","limitTagProps","splice","push","SlotOption","baseOptionProps","as","defaultRenderOption","optionProps","renderListOption","selected","modifiers","useMemo","options","offset","_listboxProps$ownerSt","_props$slots","colorContext","typedOption","String","option2","index2","Provider","Fragment","process","env","NODE_ENV","propTypes","string","bool","node","oneOf","defaultValue","any","Error","join","filterOptions","func","oneOfType","getOptionDisabled","isOptionEqualToValue","onChange","onClose","onHighlightChange","onInputChange","onKeyDown","onOpen","array","isRequired","shape","object","sx","arrayOf"],"sources":["C:/Projects/PhoenixBus/SecondApp/phoenixbus2/client/node_modules/@mui/joy/Autocomplete/Autocomplete.js"],"sourcesContent":["'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _ClearIcon, _ArrowDropDownIcon;\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"clearOnBlur\", \"clearOnEscape\", \"defaultValue\", \"disableCloseOnSelect\", \"disabledItemsFocusable\", \"disableListWrap\", \"filterSelectedOptions\", \"handleHomeEndKeys\", \"includeInputInList\", \"openOnFocus\", \"selectOnFocus\"],\n  _excluded2 = [\"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"autoFocus\", \"clearIcon\", \"clearText\", \"closeText\", \"disableClearable\", \"disabled\", \"endDecorator\", \"error\", \"filterOptions\", \"forcePopupIcon\", \"freeSolo\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"id\", \"inputValue\", \"limitTags\", \"loading\", \"loadingText\", \"multiple\", \"name\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openText\", \"options\", \"placeholder\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderOption\", \"renderTags\", \"required\", \"type\", \"startDecorator\", \"size\", \"color\", \"variant\", \"value\", \"component\", \"slots\", \"slotProps\"],\n  _excluded3 = [\"onDelete\"],\n  _excluded4 = [\"onBlur\", \"onFocus\", \"onMouseDown\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType, unstable_useForkRef as useForkRef, unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { useAutocomplete } from '@mui/base/useAutocomplete';\nimport { Popper } from '@mui/base/Popper';\nimport { useThemeProps } from '../styles';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport styled from '../styles/styled';\nimport { VariantColorProvider, getChildVariantAndColor } from '../styles/variantColorInheritance';\n// slot components\nimport { StyledIconButton } from '../IconButton/IconButton';\n// default render components\nimport Chip, { chipClasses } from '../Chip';\nimport ChipDelete from '../ChipDelete';\nimport { StyledInputRoot, StyledInputHtml, StyledInputStartDecorator, StyledInputEndDecorator } from '../Input/Input';\nimport List from '../List';\nimport ListProvider from '../List/ListProvider';\nimport ListSubheader from '../ListSubheader';\nimport ListItem from '../ListItem';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport { StyledAutocompleteListbox } from '../AutocompleteListbox/AutocompleteListbox';\nimport { StyledAutocompleteOption } from '../AutocompleteOption/AutocompleteOption';\nimport useSlot from '../utils/useSlot';\nimport ColorInversion, { useColorInversion } from '../styles/ColorInversion';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.contains(document.activeElement);\n// @ts-ignore\nconst defaultGetOptionLabel = option => {\n  var _option$label;\n  return (_option$label = option.label) != null ? _option$label : option;\n};\nconst defaultLimitTagsText = more => `+${more}`;\nconst defaultRenderGroup = params => /*#__PURE__*/_jsxs(ListItem, {\n  nested: true,\n  children: [/*#__PURE__*/_jsx(ListSubheader, {\n    sticky: true,\n    children: params.group\n  }), /*#__PURE__*/_jsx(List, {\n    children: params.children\n  })]\n}, params.key);\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    focused,\n    hasClearIcon,\n    hasPopupIcon,\n    popupOpen,\n    variant,\n    color,\n    size,\n    multiple\n  } = ownerState;\n  const slots = {\n    root: ['root', focused && 'focused', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],\n    wrapper: ['wrapper', multiple && 'multiple'],\n    input: ['input'],\n    startDecorator: ['startDecorator'],\n    endDecorator: ['endDecorator'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen', disabled && 'disabled'],\n    listbox: ['listbox'],\n    option: ['option'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    limitTag: ['limitTag']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, {});\n};\nconst AutocompleteRoot = styled(StyledInputRoot, {\n  name: 'JoyAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  ownerState\n}) => _extends({\n  '--Autocomplete-wrapperGap': '3px'\n}, ownerState.size === 'lg' && {\n  '--Autocomplete-wrapperGap': '4px'\n}, {\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  }\n}, ownerState.multiple && !ownerState.startDecorator && {\n  paddingInlineStart: 0\n}));\n\n/**\n * Wrapper groups the chips (multi selection) and the input\n * so that start/end decorators can stay in the normal flow.\n */\nconst AutocompleteWrapper = styled('div', {\n  name: 'JoyAutocomplete',\n  slot: 'Wrapper',\n  overridesResolver: (props, styles) => styles.wrapper\n})(({\n  ownerState\n}) => ({\n  flex: 1,\n  // stretch to fill the root slot\n  minWidth: 0,\n  // won't push end decorator out of the autocomplete\n  display: 'flex',\n  alignItems: 'center',\n  flexWrap: 'wrap',\n  [`&.${autocompleteClasses.multiple}`]: _extends({\n    paddingBlockEnd: 'min(var(--_Input-paddingBlock), var(--Autocomplete-wrapperGap))'\n  }, ownerState.startDecorator && Array.isArray(ownerState.value) && ownerState.value.length > 0 && {\n    marginBlockStart: 'min(var(--_Input-paddingBlock) - var(--Autocomplete-wrapperGap), 0px)',\n    marginInlineStart: 'calc(-1 * var(--Autocomplete-wrapperGap))',\n    [`& .${autocompleteClasses.input}`]: {\n      marginInlineStart: 'max(var(--Autocomplete-wrapperGap), var(--Input-gap))'\n    }\n  }),\n  [`& .${chipClasses.root}`]: {\n    // TODO: use flexbox `gap` later.\n    minWidth: 0,\n    marginInlineStart: 'var(--Autocomplete-wrapperGap)',\n    marginBlockStart: 'var(--Autocomplete-wrapperGap)'\n  }\n}));\nconst AutocompleteInput = styled(StyledInputHtml, {\n  name: 'JoyAutocomplete',\n  slot: 'Input',\n  overridesResolver: (props, styles) => styles.input\n})(({\n  ownerState\n}) => _extends({\n  minWidth: 30,\n  minHeight: 'var(--Chip-minHeight)'\n}, ownerState.multiple && _extends({\n  marginBlockStart: 'var(--Autocomplete-wrapperGap)'\n}, !ownerState.startDecorator && {\n  marginInlineStart: 'var(--Input-paddingInline)'\n})));\nconst AutocompleteStartDecorator = styled(StyledInputStartDecorator, {\n  name: 'JoyAutocomplete',\n  slot: 'StartDecorator',\n  overridesResolver: (props, styles) => styles.startDecorator\n})({});\nconst AutocompleteEndDecorator = styled(StyledInputEndDecorator, {\n  name: 'JoyAutocomplete',\n  slot: 'EndDecorator',\n  overridesResolver: (props, styles) => styles.endDecorator\n})(({\n  ownerState\n}) => _extends({}, (ownerState.hasClearIcon || ownerState.hasPopupIcon) && {\n  '--Button-margin': '0px',\n  '--IconButton-margin': '0px',\n  '--Icon-margin': '0px'\n}));\nconst AutocompleteClearIndicator = styled(StyledIconButton, {\n  name: 'JoyAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})(({\n  ownerState\n}) => _extends({\n  alignSelf: 'center'\n}, !ownerState.hasPopupIcon && {\n  marginInlineEnd: 'calc(var(--Input-decoratorChildOffset) * -1)'\n}, {\n  marginInlineStart: 'calc(var(--_Input-paddingBlock) / 2)',\n  visibility: ownerState.focused ? 'visible' : 'hidden'\n}));\nconst AutocompletePopupIndicator = styled(StyledIconButton, {\n  name: 'JoyAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: (props, styles) => styles.popupIndicator\n})({\n  alignSelf: 'center',\n  marginInlineStart: 'calc(var(--_Input-paddingBlock) / 2)',\n  marginInlineEnd: 'calc(var(--Input-decoratorChildOffset) * -1)',\n  [`&.${autocompleteClasses.popupIndicatorOpen}`]: {\n    transform: 'rotate(180deg)',\n    '--Icon-color': 'currentColor'\n  }\n});\nconst AutocompleteListbox = styled(StyledAutocompleteListbox, {\n  name: 'JoyAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  // `unstable_popup-zIndex` is a private variable that lets other component, e.g. Modal, to override the z-index so that the listbox can be displayed above the Modal.\n  zIndex: `var(--unstable_popup-zIndex, ${theme.vars.zIndex.popup})`\n}));\nconst AutocompleteOption = styled(StyledAutocompleteOption, {\n  name: 'JoyAutocomplete',\n  slot: 'Option',\n  overridesResolver: (props, styles) => styles.option\n})({});\nconst AutocompleteLoading = styled(ListItem, {\n  name: 'JoyAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary\n}));\nconst AutocompleteNoOptions = styled(ListItem, {\n  name: 'JoyAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary\n}));\nconst AutocompleteLimitTag = styled('div', {\n  name: 'JoyAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})({\n  marginInlineStart: 'calc(var(--Input-paddingInline) / 2)',\n  marginBlockStart: 'var(--_Input-paddingBlock)'\n});\nconst excludeUseAutocompleteParams = _ref => {\n  let other = _objectWithoutPropertiesLoose(_ref, _excluded);\n  return other;\n};\n/**\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/joy-ui/react-autocomplete/)\n *\n * API:\n *\n * - [Autocomplete API](https://mui.com/joy-ui/api/autocomplete/)\n */\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _ref2, _inProps$error, _ref3, _inProps$size, _inProps$color, _formControl$color, _ref4;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyAutocomplete'\n  });\n  const {\n      'aria-describedby': ariaDescribedby,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      autoFocus,\n      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n        fontSize: \"md\"\n      })),\n      clearText = 'Clear',\n      closeText = 'Close',\n      disableClearable = false,\n      disabled: disabledProp,\n      endDecorator,\n      error: errorProp = false,\n      forcePopupIcon = 'auto',\n      freeSolo = false,\n      getLimitTagsText = defaultLimitTagsText,\n      getOptionLabel = defaultGetOptionLabel,\n      groupBy,\n      id,\n      limitTags = -1,\n      loading = false,\n      loadingText = 'Loading…',\n      multiple = false,\n      name,\n      noOptionsText = 'No options',\n      openText = 'Open',\n      placeholder,\n      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n      readOnly = false,\n      renderGroup = defaultRenderGroup,\n      renderOption: renderOptionProp,\n      renderTags,\n      required,\n      type,\n      startDecorator,\n      size: sizeProp = 'md',\n      color: colorProp = 'neutral',\n      variant = 'outlined',\n      component,\n      slots = {},\n      slotProps = {}\n    } = props,\n    otherProps = _objectWithoutPropertiesLoose(props, _excluded2);\n  const other = excludeUseAutocompleteParams(otherProps);\n  const {\n    getColor\n  } = useColorInversion(variant);\n  const formControl = React.useContext(FormControlContext);\n  const error = (_ref2 = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref2 : errorProp;\n  const size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;\n  const rootColor = (_inProps$color = inProps.color) != null ? _inProps$color : error ? 'danger' : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp;\n  const color = getColor(inProps.color, rootColor);\n  const disabled = (_ref4 = disabledProp != null ? disabledProp : formControl == null ? void 0 : formControl.disabled) != null ? _ref4 : false;\n  const {\n    getRootProps,\n    getInputProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,\n    componentName: 'Autocomplete',\n    unstable_classNamePrefix: 'Mui',\n    unstable_isActiveElementInListbox: defaultIsActiveElementInListbox\n  }));\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    onClick: handleRootOnClick\n  } = getRootProps();\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = _extends({}, props, {\n    value,\n    disabled,\n    focused,\n    getOptionLabel,\n    hasOptions: !!groupedOptions.length,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size,\n    color,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  let selectedOptions;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => {\n      const _getTagProps = getTagProps(params),\n        {\n          onDelete\n        } = _getTagProps,\n        tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded3);\n      return _extends({\n        disabled,\n        size,\n        onClick: onDelete\n      }, tagProps);\n    };\n    if (renderTags) {\n      selectedOptions = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      selectedOptions = value.map((option, index) => {\n        return /*#__PURE__*/_jsx(Chip, {\n          size: size,\n          variant: \"soft\",\n          color: color === 'context' ? undefined : 'neutral',\n          endDecorator: /*#__PURE__*/_jsx(ChipDelete, _extends({}, getCustomizedTagProps({\n            index\n          }))),\n          children: getOptionLabel(option)\n        }, index);\n      });\n    }\n  }\n  const rootRef = useForkRef(ref, setAnchorEl);\n  const rootStateClasses = {\n    [autocompleteClasses.disabled]: disabled,\n    [autocompleteClasses.error]: error,\n    [autocompleteClasses.focused]: focused,\n    [autocompleteClasses.formControl]: Boolean(formControl)\n  };\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref: rootRef,\n    className: [classes.root, rootStateClasses],\n    elementType: AutocompleteRoot,\n    externalForwardedProps,\n    ownerState,\n    getSlotProps: getRootProps,\n    additionalProps: {\n      onClick: event => {\n        if (handleRootOnClick) {\n          handleRootOnClick(event);\n        }\n        if (event.currentTarget === event.target && handleInputMouseDown) {\n          handleInputMouseDown(event);\n        }\n      }\n    }\n  });\n  const [SlotWrapper, wrapperProps] = useSlot('wrapper', {\n    className: classes.wrapper,\n    elementType: AutocompleteWrapper,\n    externalForwardedProps,\n    ownerState\n  });\n  const inputStateClasses = {\n    [autocompleteClasses.disabled]: disabled\n  };\n  const [SlotInput, inputProps] = useSlot('input', {\n    className: [classes.input, inputStateClasses],\n    elementType: AutocompleteInput,\n    getSlotProps: handlers => {\n      const _getInputProps = getInputProps(),\n        {\n          onBlur,\n          onFocus,\n          onMouseDown\n        } = _getInputProps,\n        inputSlotProps = _objectWithoutPropertiesLoose(_getInputProps, _excluded4);\n      return _extends({}, inputSlotProps, {\n        onBlur: event => {\n          var _handlers$onBlur;\n          onBlur == null ? void 0 : onBlur(event);\n          (_handlers$onBlur = handlers.onBlur) == null ? void 0 : _handlers$onBlur.call(handlers, event);\n        },\n        onFocus: event => {\n          var _handlers$onFocus;\n          onFocus == null ? void 0 : onFocus(event);\n          (_handlers$onFocus = handlers.onFocus) == null ? void 0 : _handlers$onFocus.call(handlers, event);\n        },\n        onMouseDown: event => {\n          var _handlers$onMouseDown;\n          onMouseDown == null ? void 0 : onMouseDown(event);\n          (_handlers$onMouseDown = handlers.onMouseDown) == null ? void 0 : _handlers$onMouseDown.call(handlers, event);\n        }\n      });\n    },\n    externalForwardedProps,\n    ownerState,\n    additionalProps: {\n      autoFocus,\n      placeholder,\n      name,\n      readOnly,\n      disabled,\n      required: required != null ? required : formControl == null ? void 0 : formControl.required,\n      type,\n      'aria-invalid': error || undefined,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      'aria-describedby': ariaDescribedby != null ? ariaDescribedby : formControl == null ? void 0 : formControl['aria-describedby']\n    }\n  });\n  const [SlotStartDecorator, startDecoratorProps] = useSlot('startDecorator', {\n    className: classes.startDecorator,\n    elementType: AutocompleteStartDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotEndDecorator, endDecoratorProps] = useSlot('endDecorator', {\n    className: classes.endDecorator,\n    elementType: AutocompleteEndDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotClearIndicator, clearIndicatorProps] = useSlot('clearIndicator', {\n    className: classes.clearIndicator,\n    elementType: AutocompleteClearIndicator,\n    getSlotProps: getClearProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || getChildVariantAndColor(variant, rootColor).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, rootColor).color || 'neutral',\n      disableColorInversion: !!inProps.color\n    }),\n    additionalProps: {\n      'aria-label': clearText,\n      title: clearText\n    }\n  });\n  const [SlotPopupIndicator, popupIndicatorProps] = useSlot('popupIndicator', {\n    className: classes.popupIndicator,\n    elementType: AutocompletePopupIndicator,\n    getSlotProps: getPopupIndicatorProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || getChildVariantAndColor(variant, rootColor).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, rootColor).color || 'neutral',\n      disableColorInversion: !!inProps.color\n    }),\n    additionalProps: {\n      disabled,\n      'aria-label': popupOpen ? closeText : openText,\n      title: popupOpen ? closeText : openText,\n      type: 'button'\n    }\n  });\n  const [SlotListbox, listboxProps] = useSlot('listbox', {\n    className: classes.listbox,\n    elementType: AutocompleteListbox,\n    getSlotProps: getListboxProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || variant,\n      color: mergedProps.color || (!mergedProps.disablePortal ? rootColor : color),\n      disableColorInversion: !mergedProps.disablePortal\n    }),\n    additionalProps: {\n      anchorEl,\n      open: popupOpen,\n      style: anchorEl ? {\n        width: anchorEl.clientWidth\n      } : {}\n    }\n  });\n  const [SlotLoading, loadingProps] = useSlot('loading', {\n    className: classes.loading,\n    elementType: AutocompleteLoading,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotNoOptions, noOptionsProps] = useSlot('noOptions', {\n    className: classes.noOptions,\n    elementType: AutocompleteNoOptions,\n    externalForwardedProps,\n    ownerState,\n    additionalProps: {\n      role: 'presentation',\n      onMouseDown: event => {\n        // Prevent input blur when interacting with the \"no options\" content\n        event.preventDefault();\n      }\n    }\n  });\n  const [SlotLimitTag, limitTagProps] = useSlot('limitTag', {\n    className: classes.limitTag,\n    elementType: AutocompleteLimitTag,\n    externalForwardedProps,\n    ownerState\n  });\n  if (limitTags > -1 && Array.isArray(selectedOptions)) {\n    const more = selectedOptions.length - limitTags;\n    if (!focused && more > 0) {\n      selectedOptions = selectedOptions.splice(0, limitTags);\n      selectedOptions.push( /*#__PURE__*/_jsx(SlotLimitTag, _extends({}, limitTagProps, {\n        children: getLimitTagsText(more)\n      }), selectedOptions.length));\n    }\n  }\n  const [SlotOption, baseOptionProps] = useSlot('option', {\n    className: classes.option,\n    elementType: AutocompleteOption,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      variant: mergedProps.variant || getChildVariantAndColor(variant, rootColor).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, rootColor).color || 'neutral',\n      disableColorInversion: !listboxProps.disablePortal\n    }),\n    additionalProps: {\n      as: 'li'\n    }\n  });\n  const defaultRenderOption = (optionProps, option) => /*#__PURE__*/_jsx(SlotOption, _extends({}, optionProps, {\n    children: getOptionLabel(option)\n  }));\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, baseOptionProps, optionProps), option, {\n      // `aria-selected` prop will always by boolean, see useAutocomplete hook.\n      selected: !!optionProps['aria-selected'],\n      inputValue,\n      ownerState\n    });\n  };\n\n  // Wait for `listboxProps` because `slotProps.listbox` could be a function.\n  const modifiers = React.useMemo(() => [{\n    name: 'offset',\n    options: {\n      offset: [0, 4]\n    }\n  }, ...(listboxProps.modifiers || [])], [listboxProps.modifiers]);\n  let popup = null;\n  if (anchorEl) {\n    var _listboxProps$ownerSt, _props$slots;\n    popup = /*#__PURE__*/_jsx(VariantColorProvider, {\n      variant: variant,\n      color: rootColor,\n      children: /*#__PURE__*/_jsx(ListProvider, {\n        nested: true,\n        children: /*#__PURE__*/_jsxs(SlotListbox, _extends({}, listboxProps, {\n          className: clsx(listboxProps.className, ((_listboxProps$ownerSt = listboxProps.ownerState) == null ? void 0 : _listboxProps$ownerSt.color) === 'context' && autocompleteClasses.colorContext)\n          // @ts-ignore internal logic (too complex to typed PopperOwnProps to SlotListbox but this should be removed when we have `usePopper`)\n          ,\n          modifiers: modifiers\n        }, !((_props$slots = props.slots) != null && _props$slots.listbox) && {\n          as: Popper,\n          slots: {\n            root: listboxProps.as || 'ul'\n          }\n        }, {\n          children: [groupedOptions.map((option, index) => {\n            if (groupBy) {\n              const typedOption = option;\n              return renderGroup({\n                key: String(typedOption.key),\n                group: typedOption.group,\n                children: typedOption.options.map((option2, index2) => renderListOption(option2, typedOption.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          }), loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(SlotLoading, _extends({}, loadingProps, {\n            children: loadingText\n          })) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(SlotNoOptions, _extends({}, noOptionsProps, {\n            children: noOptionsText\n          })) : null]\n        }))\n      })\n    });\n    if (!listboxProps.disablePortal) {\n      // For portal popup, the children should not inherit color inversion from the upper parent.\n      popup = /*#__PURE__*/_jsx(ColorInversion.Provider, {\n        value: undefined,\n        children: popup\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {\n      children: [startDecorator && /*#__PURE__*/_jsx(SlotStartDecorator, _extends({}, startDecoratorProps, {\n        children: startDecorator\n      })), /*#__PURE__*/_jsxs(SlotWrapper, _extends({}, wrapperProps, {\n        children: [selectedOptions, /*#__PURE__*/_jsx(SlotInput, _extends({}, inputProps))]\n      })), endDecorator && /*#__PURE__*/_jsx(SlotEndDecorator, _extends({}, endDecoratorProps, {\n        children: endDecorator\n      })), hasClearIcon ? /*#__PURE__*/_jsx(SlotClearIndicator, _extends({}, clearIndicatorProps, {\n        children: clearIcon\n      })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(SlotPopupIndicator, _extends({}, popupIndicatorProps, {\n        children: popupIcon\n      })) : null]\n    })), popup]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Identifies the element (or elements) that describes the object.\n   * @see aria-labelledby\n   */\n  'aria-describedby': PropTypes.string,\n  /**\n   * Defines a string value that labels the current element.\n   * @see aria-labelledby.\n   */\n  'aria-label': PropTypes.string,\n  /**\n   * Identifies the element (or elements) that labels the current element.\n   * @see aria-describedby.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"md\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Trailing adornment for this input.\n   */\n  endDecorator: PropTypes.node,\n  /**\n   * If `true`, the `input` will indicate an error.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {string | number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more: string | number) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The input placeholder\n   */\n  placeholder: PropTypes.string,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'md'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    endDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    limitTag: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    loading: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    noOptions: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    option: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popupIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    startDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    wrapper: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    clearIndicator: PropTypes.elementType,\n    endDecorator: PropTypes.elementType,\n    input: PropTypes.elementType,\n    limitTag: PropTypes.elementType,\n    listbox: PropTypes.elementType,\n    loading: PropTypes.elementType,\n    noOptions: PropTypes.elementType,\n    option: PropTypes.elementType,\n    popupIndicator: PropTypes.elementType,\n    root: PropTypes.elementType,\n    startDecorator: PropTypes.elementType,\n    wrapper: PropTypes.elementType\n  }),\n  /**\n   * Leading adornment for this input.\n   */\n  startDecorator: PropTypes.node,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid'])\n} : void 0;\nexport default Autocomplete;"],"mappings":"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ACA;AACA;AACA;AACA;EACEjJ,OAAO,EAAE7J,SAAS,CAAC8S,IAAI;EACvB;AACF;AACA;AACA;EACEhJ,EAAE,EAAE9J,SAAS,CAACqS,MAAM;EACpB;AACF;AACA;EACErG,UAAU,EAAEhM,SAAS,CAACqS,MAAM;EAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEY,oBAAoB,EAAEjT,SAAS,CAAC8S,IAAI;EACpC;AACF;AACA;AACA;AACA;EACE/I,SAAS,EAAE5J,eAAe;EAC1B;AACF;AACA;AACA;AACA;EACE8E,OAAO,EAAEjF,SAAS,CAACsS,IAAI;EACvB;AACF;AACA;AACA;AACA;AACA;EACEtI,WAAW,EAAEhK,SAAS,CAACuS,IAAI;EAC3B;AACF;AACA;AACA;EACEhO,QAAQ,EAAEvE,SAAS,CAACsS,IAAI;EACxB;AACF;AACA;EACEjN,IAAI,EAAErF,SAAS,CAACqS,MAAM;EACtB;AACF;AACA;AACA;AACA;AACA;EACEpI,aAAa,EAAEjK,SAAS,CAACuS,IAAI;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEW,QAAQ,EAAElT,SAAS,CAAC8S,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,OAAO,EAAEnT,SAAS,CAAC8S,IAAI;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;EACEM,iBAAiB,EAAEpT,SAAS,CAAC8S,IAAI;EACjC;AACF;AACA;AACA;AACA;AACA;AACA;EACEO,aAAa,EAAErT,SAAS,CAAC8S,IAAI;EAC7B;AACF;AACA;EACEQ,SAAS,EAAEtT,SAAS,CAAC8S,IAAI;EACzB;AACF;AACA;AACA;AACA;AACA;EACES,MAAM,EAAEvT,SAAS,CAAC8S,IAAI;EACtB;AACF;AACA;EACE/C,IAAI,EAAE/P,SAAS,CAACsS,IAAI;EACpB;AACF;AACA;AACA;AACA;AACA;EACEpI,QAAQ,EAAElK,SAAS,CAACqS,MAAM;EAC1B;AACF;AACA;EACEf,OAAO,EAAEtR,SAAS,CAACwT,KAAK,CAACC,UAAU;EACnC;AAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}