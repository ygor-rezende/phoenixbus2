{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\PhoenixBus\\\\SecondApp\\\\client\\\\src\\\\utils\\\\private_routes.jsx\",\n  _s = $RefreshSig$();\nimport { Outlet, Navigate } from \"react-router-dom\";\nimport { useCookies } from \"react-cookie\";\nimport { Jwt } from \"jsonwebtoken\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminRoutes = () => {\n  _s();\n  const [cookies] = useCookies(null);\n\n  //if there is an user logged in\n  let auth = cookies.Username ? true : false;\n  return {\n    if(auth) {\n      //decode the token\n      const decoded = Jwt.verify(cookies.AuthToken, \"statesecret\");\n      //if user is admin it navigate to the route requested. If not navigate to the login page\n      decoded.userType === \"admin\" ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 38\n      }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 51\n      }, this);\n    }\n  };\n};\n_s(AdminRoutes, \"KWItf4Qn7XyeOw4JKNC6dqw2Uu4=\", false, function () {\n  return [useCookies];\n});\n_c = AdminRoutes;\nexport default AdminRoutes;\nvar _c;\n$RefreshReg$(_c, \"AdminRoutes\");","map":{"version":3,"names":["Outlet","Navigate","useCookies","Jwt","jsxDEV","_jsxDEV","AdminRoutes","_s","cookies","auth","Username","if","decoded","verify","AuthToken","userType","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Projects/PhoenixBus/SecondApp/client/src/utils/private_routes.jsx"],"sourcesContent":["import { Outlet, Navigate } from \"react-router-dom\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { Jwt } from \"jsonwebtoken\";\r\n\r\nconst AdminRoutes = () => {\r\n  const [cookies] = useCookies(null);\r\n\r\n  //if there is an user logged in\r\n  let auth = cookies.Username ? true : false;\r\n  return {\r\n    if(auth) {\r\n      //decode the token\r\n      const decoded = Jwt.verify(cookies.AuthToken, \"statesecret\");\r\n      //if user is admin it navigate to the route requested. If not navigate to the login page\r\n      decoded.userType === \"admin\" ? <Outlet /> : <Navigate to=\"/login\" />;\r\n    },\r\n  };\r\n};\r\n\r\nexport default AdminRoutes;\r\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,kBAAkB;AACnD,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,GAAG,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,CAAC,GAAGN,UAAU,CAAC,IAAI,CAAC;;EAElC;EACA,IAAIO,IAAI,GAAGD,OAAO,CAACE,QAAQ,GAAG,IAAI,GAAG,KAAK;EAC1C,OAAO;IACLC,EAAEA,CAACF,IAAI,EAAE;MACP;MACA,MAAMG,OAAO,GAAGT,GAAG,CAACU,MAAM,CAACL,OAAO,CAACM,SAAS,EAAE,aAAa,CAAC;MAC5D;MACAF,OAAO,CAACG,QAAQ,KAAK,OAAO,gBAAGV,OAAA,CAACL,MAAM;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAAGd,OAAA,CAACJ,QAAQ;QAACmB,EAAE,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACtE;EACF,CAAC;AACH,CAAC;AAACZ,EAAA,CAbID,WAAW;EAAA,QACGJ,UAAU;AAAA;AAAAmB,EAAA,GADxBf,WAAW;AAejB,eAAeA,WAAW;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}